Sure, here are some real-time examples along with explanations that are easy to understand:

1. **parentNode Property**:
   - Suppose you have an HTML structure with nested elements, and you want to find the parent element of a specific child element:
     ```html
     <div id="parent">
         <p id="child">Child Element</p>
     </div>
     ```
     ```javascript
     const childElement = document.getElementById("child");
     const parentElement = childElement.parentNode;
     console.log(parentElement.id); // Output: parent
     ```

2. **childNodes Property**:
   - If you want to access all child elements of a parent element and perform some operation, such as changing their text color:
     ```html
     <ul id="parent">
         <li>Item 1</li>
         <li>Item 2</li>
         <li>Item 3</li>
     </ul>
     ```
     ```javascript
     const parentElement = document.getElementById("parent");
     const childNodes = parentElement.childNodes;
     for (const i = 0; i < childNodes.length; i++) {
         childNodes[i].style.color = "blue";
     }
     ```

3. **appendChild() Method**:
   - Suppose you want to dynamically add a new list item to an existing unordered list:
     ```html
     <ul id="parent">
         <li>Item 1</li>
         <li>Item 2</li>
     </ul>
     ```
     ```javascript
     const parentElement = document.getElementById("parent");
     const newListItem = document.createElement("li");
     newListItem.textContent = "Item 3";
     parentElement.appendChild(newListItem);
     ```

4. **removeChild() Method**:
   - If you want to remove a specific child element from its parent:
     ```html
     <div id="parent">
         <p id="child">Child Element</p>
     </div>
     ```
     ```javascript
     const parentElement = document.getElementById("parent");
     const childElement = document.getElementById("child");
     parentElement.removeChild(childElement);
     ```

5. **insertBefore() Method**:
   - You can insert a new element before an existing one within a parent element:
     ```html
     <ul id="parent">
         <li>Item 1</li>
         <li>Item 3</li>
     </ul>
     ```
     ```javascript
     const parentElement = document.getElementById("parent");
     const newListItem = document.createElement("li");
     newListItem.textContent = "Item 2";
     const referenceNode = parentElement.childNodes[1];
     parentElement.insertBefore(newListItem, referenceNode);
     ```

These examples demonstrate practical use cases for accessing, manipulating, and traversing the DOM using the mentioned properties and methods.